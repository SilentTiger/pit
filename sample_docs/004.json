["import { inherit } from './utils.js';"]
[1,{"frag":"end"}]
["import * as regex from './regex.js';"]
[1,{"frag":"end"}]
[1,{"frag":"end"}]
["// Common regexps"]
[1,{"frag":"end"}]
["export const IDENT_RE = '[a-zA-Z]\\\\w*';"]
[1,{"frag":"end"}]
["export const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';"]
[1,{"frag":"end"}]
["export const NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';"]
[1,{"frag":"end"}]
["export const C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float"]
[1,{"frag":"end"}]
["export const BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b..."]
[1,{"frag":"end"}]
["export const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';"]
[1,{"frag":"end"}]
[1,{"frag":"end"}]
["/**"]
[1,{"frag":"end"}]
["* @param { Partial<Mode> & {binary?: string | RegExp} } opts"]
[1,{"frag":"end"}]
["*/"]
[1,{"frag":"end"}]
["export const SHEBANG = (opts = {}) => {"]
[1,{"frag":"end"}]
["  const beginShebang = /^#![ ]*\\//;"]
[1,{"frag":"end"}]
["  if (opts.binary) {"]
[1,{"frag":"end"}]
["    opts.begin = regex.concat("]
[1,{"frag":"end"}]
["      beginShebang,"]
[1,{"frag":"end"}]
["      /.*\\b/,"]
[1,{"frag":"end"}]
["      opts.binary,"]
[1,{"frag":"end"}]
["      /\\b.*/);"]
[1,{"frag":"end"}]
["  }"]
[1,{"frag":"end"}]
["  return inherit({"]
[1,{"frag":"end"}]
["    className: 'meta',"]
[1,{"frag":"end"}]
["    begin: beginShebang,"]
[1,{"frag":"end"}]
["    end: /$/,"]
[1,{"frag":"end"}]
["    relevance: 0,"]
[1,{"frag":"end"}]
["    /** @type {ModeCallback} */"]
[1,{"frag":"end"}]
["    \"on:begin\": (m, resp) => {"]
[1,{"frag":"end"}]
["      if (m.index !== 0) resp.ignoreMatch();"]
[1,{"frag":"end"}]
["    }"]
[1,{"frag":"end"}]
["  }, opts);"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
[1,{"frag":"end"}]
["// Common modes"]
[1,{"frag":"end"}]
["export const BACKSLASH_ESCAPE = {"]
[1,{"frag":"end"}]
["  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const APOS_STRING_MODE = {"]
[1,{"frag":"end"}]
["  className: 'string',"]
[1,{"frag":"end"}]
["  begin: '\\'',"]
[1,{"frag":"end"}]
["  end: '\\'',"]
[1,{"frag":"end"}]
["  illegal: '\\\\n',"]
[1,{"frag":"end"}]
["  contains: [BACKSLASH_ESCAPE]"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const QUOTE_STRING_MODE = {"]
[1,{"frag":"end"}]
["  className: 'string',"]
[1,{"frag":"end"}]
["  begin: '\"',"]
[1,{"frag":"end"}]
["  end: '\"',"]
[1,{"frag":"end"}]
["  illegal: '\\\\n',"]
[1,{"frag":"end"}]
["  contains: [BACKSLASH_ESCAPE]"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const PHRASAL_WORDS_MODE = {"]
[1,{"frag":"end"}]
["  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["/**"]
[1,{"frag":"end"}]
[" * Creates a comment mode"]
[1,{"frag":"end"}]
[" *"]
[1,{"frag":"end"}]
[" * @param {string | RegExp} begin"]
[1,{"frag":"end"}]
[" * @param {string | RegExp} end"]
[1,{"frag":"end"}]
[" * @param {Mode | {}} [modeOptions]"]
[1,{"frag":"end"}]
[" * @returns {Partial<Mode>}"]
[1,{"frag":"end"}]
[" */"]
[1,{"frag":"end"}]
["export const COMMENT = function(begin, end, modeOptions = {}) {"]
[1,{"frag":"end"}]
["  var mode = inherit("]
[1,{"frag":"end"}]
["    {"]
[1,{"frag":"end"}]
["      className: 'comment',"]
[1,{"frag":"end"}]
["      begin,"]
[1,{"frag":"end"}]
["      end,"]
[1,{"frag":"end"}]
["      contains: []"]
[1,{"frag":"end"}]
["    },"]
[1,{"frag":"end"}]
["    modeOptions"]
[1,{"frag":"end"}]
["  );"]
[1,{"frag":"end"}]
["  mode.contains.push(PHRASAL_WORDS_MODE);"]
[1,{"frag":"end"}]
["  mode.contains.push({"]
[1,{"frag":"end"}]
["    className: 'doctag',"]
[1,{"frag":"end"}]
["    begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',"]
[1,{"frag":"end"}]
["    relevance: 0"]
[1,{"frag":"end"}]
["  });"]
[1,{"frag":"end"}]
["  return mode;"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const C_LINE_COMMENT_MODE = COMMENT('//', '$');"]
[1,{"frag":"end"}]
["export const C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');"]
[1,{"frag":"end"}]
["export const HASH_COMMENT_MODE = COMMENT('#', '$');"]
[1,{"frag":"end"}]
["export const NUMBER_MODE = {"]
[1,{"frag":"end"}]
["  className: 'number',"]
[1,{"frag":"end"}]
["  begin: NUMBER_RE,"]
[1,{"frag":"end"}]
["  relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const C_NUMBER_MODE = {"]
[1,{"frag":"end"}]
["  className: 'number',"]
[1,{"frag":"end"}]
["  begin: C_NUMBER_RE,"]
[1,{"frag":"end"}]
["  relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const BINARY_NUMBER_MODE = {"]
[1,{"frag":"end"}]
["  className: 'number',"]
[1,{"frag":"end"}]
["  begin: BINARY_NUMBER_RE,"]
[1,{"frag":"end"}]
["  relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const CSS_NUMBER_MODE = {"]
[1,{"frag":"end"}]
["  className: 'number',"]
[1,{"frag":"end"}]
["  begin: NUMBER_RE + '(' +"]
[1,{"frag":"end"}]
["    '%|em|ex|ch|rem' +"]
[1,{"frag":"end"}]
["    '|vw|vh|vmin|vmax' +"]
[1,{"frag":"end"}]
["    '|cm|mm|in|pt|pc|px' +"]
[1,{"frag":"end"}]
["    '|deg|grad|rad|turn' +"]
[1,{"frag":"end"}]
["    '|s|ms' +"]
[1,{"frag":"end"}]
["    '|Hz|kHz' +"]
[1,{"frag":"end"}]
["    '|dpi|dpcm|dppx' +"]
[1,{"frag":"end"}]
["    ')?',"]
[1,{"frag":"end"}]
["  relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const REGEXP_MODE = {"]
[1,{"frag":"end"}]
["  // this outer rule makes sure we actually have a WHOLE regex and not simply"]
[1,{"frag":"end"}]
["  // an expression such as:"]
[1,{"frag":"end"}]
["  //"]
[1,{"frag":"end"}]
["  //     3 / something"]
[1,{"frag":"end"}]
["  //"]
[1,{"frag":"end"}]
["  // (which will then blow up when regex's `illegal` sees the newline)"]
[1,{"frag":"end"}]
["  begin: /(?=\\/[^/\\n]*\\/)/,"]
[1,{"frag":"end"}]
["  contains: [{"]
[1,{"frag":"end"}]
["    className: 'regexp',"]
[1,{"frag":"end"}]
["    begin: /\\//,"]
[1,{"frag":"end"}]
["    end: /\\/[gimuy]*/,"]
[1,{"frag":"end"}]
["    illegal: /\\n/,"]
[1,{"frag":"end"}]
["    contains: ["]
[1,{"frag":"end"}]
["      BACKSLASH_ESCAPE,"]
[1,{"frag":"end"}]
["      {"]
[1,{"frag":"end"}]
["        begin: /\\[/,"]
[1,{"frag":"end"}]
["        end: /\\]/,"]
[1,{"frag":"end"}]
["        relevance: 0,"]
[1,{"frag":"end"}]
["        contains: [BACKSLASH_ESCAPE]"]
[1,{"frag":"end"}]
["      }"]
[1,{"frag":"end"}]
["    ]"]
[1,{"frag":"end"}]
["  }]"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const TITLE_MODE = {"]
[1,{"frag":"end"}]
["  className: 'title',"]
[1,{"frag":"end"}]
["  begin: IDENT_RE,"]
[1,{"frag":"end"}]
["  relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const UNDERSCORE_TITLE_MODE = {"]
[1,{"frag":"end"}]
["  className: 'title',"]
[1,{"frag":"end"}]
["  begin: UNDERSCORE_IDENT_RE,"]
[1,{"frag":"end"}]
["  relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
["export const METHOD_GUARD = {"]
[1,{"frag":"end"}]
["  // excludes method names from keyword processing"]
[1,{"frag":"end"}]
["  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,"]
[1,{"frag":"end"}]
["  relevance: 0"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end"}]
[1,{"frag":"end"}]
["/**"]
[1,{"frag":"end"}]
[" * Adds end same as begin mechanics to a mode"]
[1,{"frag":"end"}]
[" *"]
[1,{"frag":"end"}]
[" * Your mode must include at least a single () match group as that first match"]
[1,{"frag":"end"}]
[" * group is what is used for comparison"]
[1,{"frag":"end"}]
[" * @param {Partial<Mode>} mode"]
[1,{"frag":"end"}]
[" */"]
[1,{"frag":"end"}]
["export const END_SAME_AS_BEGIN = function(mode) {"]
[1,{"frag":"end"}]
["  return Object.assign(mode,"]
[1,{"frag":"end"}]
["    {"]
[1,{"frag":"end"}]
["      /** @type {ModeCallback} */"]
[1,{"frag":"end"}]
["      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },"]
[1,{"frag":"end"}]
["      /** @type {ModeCallback} */"]
[1,{"frag":"end"}]
["      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }"]
[1,{"frag":"end"}]
["    });"]
[1,{"frag":"end"}]
["};"]
[1,{"frag":"end","block":"code","language":"javascript"}]
